/* NPM Installation Dependencies */
const express = require("express");
const path = require("path");
const swaggerJSdoc = require('swagger-jsdoc');
const swaggerUI = require('swagger-ui-express');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

passport.use(new GoogleStrategy(
  {
    clientID: process.env.GOOGLE_OAUTH_TEST_APP_CLIENT_ID,
    clientSecret: process.env.GOOGLE_OAUTH_TEST_APP_CLIENT_SECRET,
    callbackURL: 'https://boiling-badlands-67608.herokuapp.com/auth/google/callback',
    scope: ['email'],
  },
  // This is a "verify" function required by all Passport strategies
  (accessToken, refreshToken, profile, cb) => {
    console.log('Our user authenticated with Google, and Google sent us back this profile info identifying the authenticated user:', profile);
    return cb(null, profile);
  },
));

/* Configure Swagger Documentation */
const options = {
  swaggerDefinition: {
    info: {
      title: 'CUBAL Media API',
      version: '1.0.0',
      description: 'Test Express API with autogenerated Swagger Documentation.',
    },
  },
  // List of files to be processes which use Swagger Documentation methods.
  apis: [
    path.resolve(__dirname, 'router.js'),
    path.resolve(__dirname, 'userRouter.js'),
    path.resolve(__dirname, 'organizationRouter.js'),
    path.resolve(__dirname, 'eventRouter.js')],
};

const specs = swaggerJSdoc(options);

/* Utility Functions */
const {
  wipeAndAdd
} = require("../util/dataManipulation");

const router = express.Router();

/********** API DOCUMENTATION **********/

router.use('/api-docs', swaggerUI.serve, swaggerUI.setup(specs));

router.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/', session: false }),
  (req, res) => {
    console.log('wooo we authenticated, here is our user object:', req.user);
    res.json(req.user);
  }
);

/********** DUMMY DATA FUNCTIONALITY /**********/

/* Wipe current DB. */
router.get("/wipe-and-add/:num", wipeAndAdd);

module.exports = router;
