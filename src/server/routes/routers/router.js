/* NPM Installation Dependencies */
const express = require("express");
const path = require("path");
const swaggerJSdoc = require('swagger-jsdoc');
const swaggerUI = require('swagger-ui-express');
const passport = require('passport');
var GoogleTokenStrategy = require('passport-google-token').Strategy;
var gcal = require('google-calendar');
var cors = require('cors');
const uniqid = require("uniqid");
require('dotenv').config({ path: path.join(__dirname + '/../../../../.env') });

const { db } = require('../../db/connection');
const { generateToken, sendToken } = require("../util/commonUtil");
const { createUser } = require("../util/userUtil");

/* Configure Swagger Documentation */
const options = {
  swaggerDefinition: {
    info: {
      title: 'CUBAL Media API',
      version: '1.0.0',
      description: 'Test Express API with autogenerated Swagger Documentation.',
    },
  },
  // List of files to be processes which use Swagger Documentation methods.
  apis: [
    path.resolve(__dirname, 'router.js'),
    path.resolve(__dirname, 'userRouter.js'),
    path.resolve(__dirname, 'organizationRouter.js'),
    path.resolve(__dirname, 'eventRouter.js')],
};

const specs = swaggerJSdoc(options);

/* Utility Functions */
const {
  wipeAndAdd
} = require("../util/dataManipulation");

const router = express.Router();

var corsOption = {
  origin: true,
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
  exposedHeaders: ['x-auth-token']
};

router.use(cors(corsOption));

/********** API DOCUMENTATION **********/

router.use('/api-docs', swaggerUI.serve, swaggerUI.setup(specs));


/********** GOOGLE AUTHENTICATION **********/

passport.use(new GoogleTokenStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET
}, (accessToken, refreshToken, profile, done) => {
  profile = profile._json

  db.users.findOne({ where: { email: profile.email } })
    .then((user) => {
      if (user) return;
      else {
        db.users.create({
          email: profile.email,
          firstName: profile.given_name,
          id: uniqid(),
          lastName: profile.family_name,
          profilePicture: profile.picture
        });
      }
    });

  let googleCalendar = new gcal.GoogleCalendar(accessToken);
  // googleCalendar.events.list('primary', {
  //   maxResults: 10,
  //   singleEvents: true,
  //   timeMin: (new Date()).toISOString(),
  //   orderBy: 'startTime',
  // }, (error, results) => {
  //   if (error) {
  //     console.log(error);
  //   } else {
  //     console.log(results);
  //   }
  // });

  // googleCalendar.events.insert('primary', {
  //   'summary': 'Sex w/ Abenazer',
  //   'location': 'Ujamaa Main Lounge',
  //   'start': {
  //     'dateTime': '2019-07-29T22:00:00-07:00',
  //     'timeZone': 'America/Los_Angeles',
  //   },
  //   'end': {
  //     'dateTime': '2019-07-29T23:00:00-07:00',
  //     'timeZone': 'America/Los_Angeles',
  //   },
  //   'sendUpdates': true
  // }, (error, result) => {
  //   if (!error) {
  //     console.log(`Event created: ${result.htmlLink}`);
  //   } else {
  //     console.log(error);
  //   }

  // });
}));

// function listEvents(auth) {
//   const calendar = google.calendar({ version: 'v3', auth });
//   calendar.events.list({
//     calendarId: 'primary',
//     timeMin: (new Date()).toISOString(),
//     maxResults: 10,
//     singleEvents: true,
//     orderBy: 'startTime',
//   }, (err, res) => {
//     if (err) return console.log('The API returned an error: ' + err);
//     const events = res.data.items;
//     if (events.length) {
//       console.log('Upcoming 10 events:');
//       events.map((event, i) => {
//         const start = event.start.dateTime || event.start.date;
//         console.log(`${start} - ${event.summary}`);
//       });
//     } else {
//       console.log('No upcoming events found.');
//     }
//   });
// }

router.route('/api/v1/auth/google')
  .post(passport.authenticate('google-token'),
    (req, res, next) => {
      console.log(process.env);
      if (!req.user) {
        return res.send(401, 'User Not Authenticated');
      }
      req.auth = {
        id: req.user.id
      };

      next();
    }, generateToken, sendToken);

/********** DUMMY DATA FUNCTIONALITY /**********/

/* Wipe current DB. */
router.get("/wipe-and-add/:num", wipeAndAdd);

module.exports = router;
